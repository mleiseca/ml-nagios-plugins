#!/usr/bin/ruby

# Nagios developer guidelines
# http://nagiosplug.sourceforge.net/developer-guidelines.html


################################################################################################
# Especially nice for tracking status_variables like:
#  - Queries
#  - Innodb_rows_deleted 
#  - Innodb_rows_inserted 
#  - Innodb_rows_read 
#  - Innodb_rows_updated 
################################################################################################

# Service type: check_mysql_stat_delta
#   output:MYSQL STAT DELTA Queries-OK. 0.114 per second
#   perfdata:Queries=0.114
# /output:MYSQL STAT DELTA Queries\D*?(\d+[.\d]*)/
# and push @s, [ mysql_stat,
#                 [ 'queries_per_second', GAUGE, $1 ]];

# set up a new service with a mysql status variable
# nagiosgraph.conf maximums should include this new service name
# serviceextinfo.cfg should include information about this service so that you get a graph

require 'mysql' 
require 'optparse'
require 'pp'
require 'timeout'


$VERSION = "check_mysql_stat_delta version: 0.1"



$CODE={
  :ok=>0,
  :warning=>1,
  :critical=>2,
  :unknown =>3,
  :dependent=>4
};


$options = {}


# from http://pastebin.com/RAZkxhY2
# returns true if value is within range
# 10       < 0 or > 10, (outside the range of {0 .. 10})
# 10:      < 10, (outside {10 .. infinity})
# ~:10     > 10, (outside the range of {-infinity .. 10})
# 10:20   < 10 or > 20, (outside the range of {10 .. 20})
# @10:20  >= 10 and <= 20, (inside the range of {10 .. 20})
def range_match ( value, range )
  v("checking for #{value} in #{range}")
  return false if ! value or ! range
  
  value = value.to_f
  return (value < 0 || value > range) if range.class != String

  result = false
  negate = (range =~ /^@(.*)/)
  range  = $1 if negate
  if range =~ /^(\d+)$/
    result = (value < 0 || value > $1.to_i)
    # untested from here to the end of the function
  elsif range =~ /^(\d+):[~]?$/
    result = (value < $1.to_i)
  elsif range =~ /^~:(\d+)$/
    result = (value > $1.to_i)
  elsif range =~ /^(\d+):(\d+)$/
    result = (value > $1.to_i && value < $2.to_i)
  end
 return negate ? !result : result
end

def print_exit(status, message, perf_data)
  
  if perf_data
    perf_data.each do |variable, value|
      index = $options[:status_variable].index(variable)
      critical = $options[:critical][index] if $options[:critical]
      warning  = $options[:warning][index] if $options[:warning]
          
      if range_match(value, critical)
        status = :critical
      elsif range_match(value, warning)
        if status != :critical
          status = :warning    
        end
      end
    end
  end

  variable_description = $options[:status_variable] ? $options[:status_variable].join(",") : ""  
  
  print "MYSQL STAT DELTA #{variable_description} - #{status.to_s.upcase}. #{message}" 
  print " |" << (perf_data ? perf_data.collect{|key,value| "#{key}=#{value}"}.join(",")  : ""); 
  print "\n";
  
  exit $CODE[status]
end

def v(message)
  if $options[:verbose]
    puts message
  end
end

optparse = OptionParser.new do|opts|
  # opts.banner = "Usage: check_mysql_stat_delta  ..."
  
  
  # This displays the help screen, all programs are
  # assumed to have this option.
  opts.on( '-V', '--version', 'Prints version number' ) do
    print_exit(:unknown, $VERSION, nil)
  end
  
  opts.on( '-h', '--help', 'Print this detailed help screen' ) do
    print_exit(:unknown, opts, nil)
  end
  
  $options[:verbose] = false
  opts.on( '-v', '--verbose', 'Print extra debugging information' ) do
    $options[:verbose] = true
  end
  
  # todo: use DEFAULT_SOCKET_TIMEOUT as default
  $options[:timeout] = 10
  opts.on( '-t', '--timeout SECONDS', 'check execution timeout' ) do|timeout|
    $options[:timeout] = timeout
  end
   
  $options[:warning] = nil
  opts.on( '-w', '--warning Warning', 'Threshold to issue a warning' ) do|warning|
    $options[:warning] = warning.split(",")
  end
  
  $options[:critical] = nil
  opts.on( '-c', '--critical Critical_Threshold', 'Threshold to issue a warning' ) do|critical|
    $options[:critical] = critical.split(",")
  end
   
  $options[:host] = 'localhost'
  opts.on( '-H', '--host HOST', 'Host to connect to. Default is localhost' ) do|host|
    $options[:host] = host
  end

  $options[:user] = nil
  opts.on( '-u', '--user USER', 'User for login' ) do|user|
    $options[:user] = user
  end
  
  $options[:password] = ''
  opts.on( '-p', '--password PASSWORD', 'Password when connecting to db' ) do|password|
    $options[:password] = password
  end
  
  $options[:status_variable] = []
  opts.on( '-s', '--status_variable STATUS_VARIABLE', 'Status variable to monitor' ) do|status_variable|
    $options[:status_variable] = status_variable.split(",")
  end
  
  $options[:log_filename] = nil
  opts.on( '-l', '--log_filename LOG_FILENAME', 'Log filename (will default to /tmp/check_mysql_stat_delta_{STATUS_VARIABLE}_{HOST}.log)' ) do|log_filename|
    $options[:log_filename] = log_filename
  end
  
end

optparse.parse!

print_exit(:unknown, "Host is required", nil) if ($options[:host].nil? || $options[:host] == "")
print_exit(:unknown, "User is required", nil) if ($options[:user].nil? || $options[:user] == "")
print_exit(:unknown, "Status variable is required", nil) if ($options[:status_variable].nil? || $options[:status_variable].empty?)

if ($options[:warning] && ($options[:status_variable].length != $options[:warning].length))
  print_exit(:unknown, "Warning arg count doesn't match status variable count", nil) 
end

if ($options[:critical] && ($options[:status_variable].length != $options[:critical].length))
  print_exit(:unknown, "Critical arg count doesn't match status variable count.", nil) 
end

if $options[:log_filename].nil?
  $options[:log_filename] = "/tmp/check_mysql_stat_delta_" << $options[:status_variable].join("-") << "_" << $options[:host] <<  ".log"
end

# pp "Options:", $options
# pp "ARGV:", ARGV

v("Using status variables: #{$options[:status_variable]}")

################################################################################################
#
# read previously saved data.
# Format: time\tvalue
#
################################################################################################

previous_time = nil
previous_values = {}
begin
  File.open($options[:log_filename], "r") do |infile|
    while (line = infile.gets)
      # todo: malformed file ?
      line.chomp!
      vals = line.split(/\t/)
      previous_time = vals[0]
      
      for index in 1...vals.length
        value_for_variable = vals[index].split(":")
        previous_values[value_for_variable[0]] = value_for_variable[1]
      end
    end
  end
rescue Errno::EACCES => err 
  # user doesn't have read access to file
  print_exit(:critical, "Error reading " + $options[:log_filename] + ": " + err.to_s, nil)
rescue Errno::ENOENT => err
  # file didn't exist
end

v("Previous time: #{previous_time}, previous value: #{previous_values}" )

################################################################################################
#
# read show status from mysql.
#
################################################################################################

current_time = nil
current_values = {}
begin
  db = Mysql.init
  db.options(Mysql::OPT_CONNECT_TIMEOUT, $options[:timeout].to_i)
  db.options(Mysql::OPT_READ_TIMEOUT,    $options[:timeout].to_i)
  db.real_connect($options[:host],$options[:user], $options[:password] )
  
  rs = db.query('show status')  

  current_time = sprintf('%.3f',Time.now.getutc.to_f)
  current_value = nil
  rs.each do |row|
    col1 = row[0]
    col2 = row[1]
    index = $options[:status_variable].index(col1)
    if index and index >= 0
      current_values[col1] = col2
    end
  end
  db.close
rescue Mysql::Error => err
  print_exit(:critical, "Error connecting to mysql: " << err.to_s, nil)
end

v("Found values: #{current_values}" )

$options[:status_variable].each do |var|
  if ! current_values[var] 
    print_exit(:unknown, "Unable to find status variable '#{var}'", nil)
  end
end

################################################################################################
#
# write the new value to the log file
#
################################################################################################

begin 
  File.open($options[:log_filename], 'w') { |f| 
    values_string = current_values.collect{|key,value| "#{key}:#{value}"}.join("\t")
    f.write([sprintf('%.3f',current_time),values_string].join("\t"))
  }
rescue Errno::EACCES => err 
  # user doesn't have write access to file
  print_exit(:critical, "Error writing #{$options[:log_filename]}: " + err.to_s, nil)
end

################################################################################################
#
# calculate occurrences per second for reporting
# If we are running the check for the first time, return OK status without a per second figure
#
################################################################################################


perf_data = {}
diff_time = current_time.to_f - previous_time.to_f
current_values.each do |variable, value|
  diff_value = value.to_i - previous_values[variable].to_i

  if previous_values[variable].nil? 
    # first time running this check. No previous file found
    v("No previous value found")
    print_exit(:ok, "unknown per second. No previous value found for variable #{variable}", nil)
  elsif diff_value < 0 
    # server must have restarted
    v("#{diff_value} is negative. Server must have restared")
    print_exit(:ok, "unknown per second. Previous value was greater than current value", nil)
  else
    val_per_second = sprintf('%.3f',diff_value.fdiv( diff_time))
    v("#{diff_value} / #{diff_time} = " << sprintf('%.3f',diff_value.fdiv( diff_time)))
    
    perf_data[variable] = val_per_second
  end
end

print_exit(:ok, "", perf_data )


